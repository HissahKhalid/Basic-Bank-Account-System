# -*- coding: utf-8 -*-
"""Basic_Bank_Account_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pO_-1io1s-jFLUL732QkS6WHKvEORXcj
"""

# Project\        Basic Bank Account System
# Description\    Develop a simple system that allows users to create an account, deposit money, withdraw money, and check their balance.
# Developers\     {Hissah Almuhaysh},{Reham Alharbi}
# Supervisor\     {Engineer Mohammed Hussein}
# Date\           8-2024

import numpy as np  # استيراد المكتبة للتعامل مع العمليات الرياضية والحسابات العلمية مثل حساب الإحصائيات NumPy

import pandas as pd  # استيراد المكتبة  لتحليل البيانات وعرضها في جداول، مثل تحويل بيانات الحسابات البنكية إلى جداول pandas

import random  # استيراد المكتبة  لتوليد أرقام عشوائية، مثل توليد رقم حساب بنكي فريد random

import seaborn as sns  # استيراد المكتبة  لرسم الرسوم البيانية وتحليل البيانات بشكل مرئي، مثل رسم الرسوم البيانية للحسابات Seaborn

import matplotlib.pyplot as plt  # استيراد المكتبة  لرسم الرسوم البيانية والتصورات البيانية، مثل إعداد وتحسين الرسوم البيانية المعروضة Matplotlib

from IPython.display import display, HTML  # استيراد دوال العرض  لعرض النصوص والأشكال بشكل منسق في بيئات  تشبه الويب IPython

import re  #  استيراد المكتبة للتعامل مع التعبيرات النظامية مثل التحقق من صحة إدخالات النصوص والبحث عن أنماط معينة  (Regular Expressions)


#----------------------------------------------class BankAccount-------------------------------------------------
class BankAccount:
    def __init__(self, owner, balance=0):
        self.owner = owner
        self.balance = balance
        self.account_id = self.generate_account_id()

    def generate_account_id(self):  # توليد رقم حساب عشوائي مكون من 6 أرقام
        return str(random.randint(100000, 999999))

    def deposit(self, amount):  # إيداع المال في الحساب
        self.balance += amount
        print_colored(f"Deposited {amount} into account {self.account_id}. New balance: {self.balance}", 'green')

    def withdraw(self, amount):  # سحب المال من الحساب
        if self.balance >= amount:
            self.balance -= amount
            print_colored(f"Withdrew {amount} from account {self.account_id}. New balance: {self.balance}", 'red')
        else:
            print_colored(f"Insufficient balance in account {self.account_id}. Current balance: {self.balance}", 'yellow')

    def check_balance(self):  # التحقق من رصيد الحساب
        print_colored(f"Account {self.account_id} balance: {self.balance}", 'cyan')

#----------------------------------------------General methods/functions-----------------------------------------

def print_colored(text, color): # دالة لطباعة نصوص ملونة
    color_map = {
        'green': '#00FF00',
        'red': '#FF0000',
        'yellow': '#FFFF00',
        'cyan': '#00FFFF',
        'blue': '#0000FF',
        'magenta': '#FF00FF',
        'black': '#000000'
    }
    color_code = color_map.get(color, '#000000') # إذا لم يكن موجود اللون يتم استخدام اللون الافتراضي الاسود
    display(HTML(f'<pre style="color:{color_code}; font-weight: bold;">{text}</pre>'))


def display_accounts(accounts):  # عرض جميع الحسابات بتنسيق جدول
    if not accounts:
        print_colored("No accounts available.", 'red')
        return

    data = {
        'Account ID': [account.account_id for account in accounts],
        'Account Holder': [account.owner for account in accounts],
        'Balance': [account.balance for account in accounts]
    }
    df = pd.DataFrame(data)  # تحويل بيانات الحسابات إلى DataFrame
    print_colored("Accounts Overview:", 'blue')
    display(HTML(df.to_html(index=False)))  # طباعة الجدول بتنسيق HTML , لا يتم تضمين أرقام الصفوف
    return df  # إرجاع DataFrame لاستخدامه لاحقاً


def display_balance_statistics(accounts):  # عرض إحصائيات الرصيد
    if not accounts:
        print_colored("No accounts available to calculate statistics.", 'red')
        return

    balances = np.array([account.balance for account in accounts])

    # حساب الإحصائيات
    total_balance = np.sum(balances)
    average_balance = np.mean(balances)
    maximum_balance = np.max(balances)
    minimum_balance = np.min(balances)

    # إنشاء DataFrame لعرض الإحصائيات في جدول
    stats_data = {
        'Statistic': ['Total Balance', 'Average Balance', 'Maximum Balance', 'Minimum Balance'],
        'Value': [total_balance, average_balance, maximum_balance, minimum_balance]
    }
    stats_df = pd.DataFrame(stats_data)

    print_colored("Balance Statistics:", 'magenta')
    display(HTML(stats_df.to_html(index=False)))  # عرض الجدول بتنسيق HTML
    print()

    # رسم بياني للأرصدة
    df = pd.DataFrame({
        'Account ID': [account.account_id for account in accounts],
        'Balance': balances
    })
    plt.figure(figsize=(10, 6))  # إعداد حجم الرسم البياني
    sns.barplot(x='Account ID', y='Balance', data=df)  # رسم مخطط شريطي باستخدام Seaborn، مع حساب الحسابات على المحور الأفقي والأرصدة على المحور الرأسي
    plt.title('Account Balances')  # إضافة عنوان للرسم البياني
    plt.xlabel('Account ID')  # تسمية المحور الأفقي رقم الحساب
    plt.ylabel('Balance')  # تسمية المحور الرأسي الرصيد
    plt.xticks(rotation=45)  # تدوير تسميات المحور الأفقي بزاوية 45 درجة لتحسين القراءة
    plt.show()  # عرض الرسم البياني


def find_account(accounts, account_id):  # البحث عن حساب بواسطة الرقم
    for acc in accounts:
        if acc.account_id == account_id:
            return acc
    return None  # إرجاع None إذا لم يتم العثور على الحساب

def get_valid_name(prompt="Enter the account holder's name: "):
    while True:
        name = input(prompt)
        if re.match("^[A-Za-z\s]+$", name):  # التحقق من أن الاسم يحتوي فقط على حروف
            return name
        else:
            print_colored("Invalid name. Please enter a valid name containing only letters and spaces.", 'red')

def print_header():
    ascii_art = """
>>===============================================================================================================================<<
|| ██████   █████                       █████      █████████                         ███████████                       █████     ||
||░░██████ ░░███                       ░░███      ███░░░░░███                       ░░███░░░░░███                     ░░███      ||
|| ░███░███ ░███   ██████  █████ █████ ███████   ███     ░░░   ██████  ████████      ░███    ░███  ██████   ████████   ░███ █████||
|| ░███░░███░███  ███░░███░░███ ░░███ ░░░███░   ░███          ███░░███░░███░░███     ░██████████  ░░░░░███ ░░███░░███  ░███░░███ ||
|| ░███ ░░██████ ░███████  ░░░█████░    ░███    ░███    █████░███████  ░███ ░███     ░███░░░░░███  ███████  ░███ ░███  ░██████░  ||
|| ░███  ░░█████ ░███░░░    ███░░░███   ░███ ███░░███  ░░███ ░███░░░   ░███ ░███     ░███    ░███ ███░░███  ░███ ░███  ░███░░███ ||
|| █████  ░░█████░░██████  █████ █████  ░░█████  ░░█████████ ░░██████  ████ █████    ███████████ ░░████████ ████ █████ ████ █████||
||░░░░░    ░░░░░  ░░░░░░  ░░░░░ ░░░░░    ░░░░░    ░░░░░░░░░   ░░░░░░  ░░░░ ░░░░░    ░░░░░░░░░░░   ░░░░░░░░ ░░░░ ░░░░░ ░░░░ ░░░░░ ||
>>===============================================================================================================================<<
"""
    print_colored(ascii_art, 'cyan')

#----------------------------------------------------Main-----------------------------------------------------

def main():
    print_header()
    accounts = []
    admin_account_id = "000001"  # رقم حساب المسؤول

    while True:
        print()
        print_colored("Welcome to the NextGen Bank!", 'yellow') # <Next Generation!> اسم البنك مأخوذ من
        print_colored('='*50, 'cyan')
        print("1. Sign in (Open new bank account)")
        print("2. Log in  (Open existing bank account)")
        print("3. Exit")
        print_colored('='*50, 'cyan')
        choice = input("\nPlease choose an option: ")
        print()

        if choice == '1':
            name = get_valid_name()  # استخدام الدالة للتحقق من صحة الاسم

            while True:
                try:
                    initial_deposit = float(input("Enter initial deposit amount: "))
                    break  # قم بالخروج من الحلقة إذا نجح التحويل
                except ValueError:
                    print_colored("Invalid input. Please enter a numeric value.", 'red')

            account = BankAccount(name, initial_deposit)
            accounts.append(account)  # إضافة الحساب إلى القائمة
            print_colored(f"Account created for {name} with an initial balance of {initial_deposit}.", 'green')
            print(f"Your account ID is: {account.account_id}")

        elif choice == '2':
            account_id = input("Enter the account ID: ")
            account = find_account(accounts, account_id)  # البحث عن الحساب بواسطة الرقم

            if account_id == admin_account_id:  # التحقق إذا كان الرقم هو رقم المسؤول
                while True:
                    print_colored("Admin Options:", 'yellow')
                    print_colored('='*50, 'cyan')
                    print("1. View all accounts")
                    print("2. View balance statistics")
                    print("3. Go Back to Main Menu")
                    print_colored('='*50, 'cyan')
                    admin_choice = input("\nPlease choose an option: ")
                    print()

                    if admin_choice == '1':
                        df = display_accounts(accounts)  # عرض جميع الحسابات
                        print()

                    elif admin_choice == '2':
                        display_balance_statistics(accounts)  # عرض إحصائيات الرصيد
                        print()

                    elif admin_choice == '3':
                        break  # العودة إلى القائمة الرئيسية

                    else:
                        print_colored("Invalid choice. Please try again.", 'red')

            elif account:  # إذا تم العثور على الحساب
                while True:
                    print_colored("Account Options:", 'yellow')
                    print_colored('='*50, 'cyan')
                    print("1. Deposit")
                    print("2. Withdraw")
                    print("3. Check Balance")
                    print("4. Delete Account")
                    print("5. Go Back to Main Menu")
                    print_colored('='*50, 'cyan')
                    sub_choice = input("\nPlease choose an option: ")
                    print()

                    if sub_choice == '1':
                        while True:
                            try:
                                amount = float(input("Enter amount to deposit: "))
                                break  # Exit loop if conversion is successful
                            except ValueError:
                                print_colored("Invalid input. Please enter a numeric value.", 'red')
                        account.deposit(amount)  # إيداع المال في الحساب
                        print()

                    elif sub_choice == '2':
                        while True:
                            try:
                                amount = float(input("Enter amount to withdraw: "))
                                break  # Exit loop if conversion is successful
                            except ValueError:
                                print_colored("Invalid input. Please enter a numeric value.", 'red')
                        account.withdraw(amount)  # سحب المال من الحساب
                        print()

                    elif sub_choice == '3':
                        account.check_balance()  # التحقق من رصيد الحساب
                        print()

                    elif sub_choice == '4':
                        accounts.remove(account)  # حذف الحساب من القائمة
                        print_colored(f"Account {account_id} has been deleted.", 'red')
                        print()
                        break

                    elif sub_choice == '5':
                        break  # العودة إلى القائمة الرئيسية

                    else:
                        print_colored("Invalid choice. Please try again.", 'red')

            else:
                print_colored("Account not found.", 'red')
                print()

        elif choice == '3':
            print_colored("Thank you for using NextGen Bank! Goodbye! See you next time :)", 'green')
            break

        else:
            print_colored("Invalid choice. Please try again.", 'red')
            print()

main()
